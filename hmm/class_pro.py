#!/usr/bin/env python
from ghmm import *
import sys
import os
import argparse
import itertools

#use for test sequence creation
def extract_kmer(s,ln):
	index = []
	for i in xrange (0,len(s)-ln+1):
		index.append(s[i:i+ln])
	return index

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description="Create feature vectors from kmer counts")
	parser.add_argument("pos", help="positive data set")
	# parser.add_argument("neg", help="negative data set")
	args = parser.parse_args()

	# ln = 2
	bp = ['A','C','T','G']
	sigma = Alphabet(bp)
	# dna = ln*[bp]
	# kmers = list(itertools.product(*dna))
	# for i in xrange(len(kmers)):
	# 	kmers[i] = ''.join(kmers[i])
	# sigma = Alphabet(kmers)

	#for single nuc
	# Ecoli E: {'A': 0.24584798822296466, 'C': 0.25370510377788963, 'T': 0.24605292453182634, 'G': 0.25439398346731934}
	# staph E: {'A': 0.33434046260538797, 'C': 0.1639971761240418, 'T': 0.3371396948822322, 'G': 0.16452266638833804}
	# difficile E: {'A': 0.355679806221173, 'C': 0.1440542420351998, 'T': 0.35371488667798534, 'G': 0.14655106506564183}
	E = [[0.24584798822296466,0.25370510377788963,0.24605292453182634,0.25439398346731934],[0.33434046260538797,0.1639971761240418,0.3371396948822322,0.16452266638833804],[0.355679806221173,0.1440542420351998,0.35371488667798534,0.14655106506564183]]

	#for dinuc
	#Ecoli E: {'AA': 0.0733126741741171, 'AC': 0.05523775886618208, 'GT': 0.05520720479538866, 'AG': 0.05161855643291408, 'CC': 0.058498314706565434, 'CA': 0.0698702488647253, 'CG': 0.07266503699497803, 'TT': 0.07328212010332369, 'GG': 0.059062110060491606, 'GC': 0.08082333763575873, 'AT': 0.06744538323443575, 'GA': 0.05816385675305891, 'TG': 0.06991080575631418, 'TA': 0.046267411046278684, 'TC': 0.057554775901349636, 'CT': 0.051080404674118104}
	#staph E: {'AA': 0.12170260964971082, 'AC': 0.052183573359847, 'GT': 0.052639760217462354, 'AG': 0.047971001154417256, 'CC': 0.02559175660565092, 'CA': 0.06439626441300456, 'CG': 0.025413485013953737, 'TT': 0.12343496021862184, 'GG': 0.025463488021380997, 'GC': 0.03378101726408182, 'AT': 0.11248647563585346, 'GA': 0.05261983148261816, 'TG': 0.06565612279579135, 'TA': 0.09562495425449502, 'TC': 0.05243974818775332, 'CT': 0.048594951725357396}
	#difficile E: {'AA': 0.13247456350821993, 'AC': 0.043937734946616964, 'GT': 0.04406595502464593, 'AG': 0.0591185969017681, 'CC': 0.024300298834309026, 'CA': 0.053163404260365324, 'CG': 0.006470296423079812, 'TT': 0.13101423811086121, 'GG': 0.02498735092871853, 'GC': 0.023891180435048995, 'AT': 0.12220732223113806, 'GA': 0.0516168576544669, 'TG': 0.05398509978931391, 'TA': 0.12048314511251744, 'TC': 0.05004437057035453, 'CT': 0.05823958526857536}
	#E = [[0.0733126741741171,0.05523775886618208,0.05520720479538866,0.05161855643291408,0.058498314706565434,0.0698702488647253,0.07266503699497803,0.07328212010332369,0.059062110060491606,0.08082333763575873,0.06744538323443575,0.05816385675305891,0.06991080575631418,0.046267411046278684,0.057554775901349636,0.051080404674118104],[0.12170260964971082,0.052183573359847,0.052639760217462354,0.047971001154417256,0.02559175660565092,0.06439626441300456,0.025413485013953737,0.12343496021862184,0.025463488021380997,0.03378101726408182,0.11248647563585346,0.05261983148261816,0.06565612279579135,0.09562495425449502,0.05243974818775332,0.048594951725357396],[0.13247456350821993,0.043937734946616964,0.04406595502464593,0.0591185969017681,0.024300298834309026,0.053163404260365324,0.006470296423079812,0.13101423811086121,0.02498735092871853,0.023891180435048995,0.12220732223113806,0.0516168576544669,0.05398509978931391,0.12048314511251744,0.05004437057035453,0.05823958526857536]]
	

	#for trinuc
	#Ecoli E:
	#staph E:
	#difficile E: 
	# E = [[0.016165675401695487, 0.016472349026038207, 0.013709883693372683, 0.023501596821603105, 0.018628019965239287, 0.01786417547497825, 0.01368738555711392, 0.010931036222654662, 0.01084999924642165, 0.009179676450589178, 0.01745942745082792, 0.012669508712785516, 0.01223942298178066, 0.016590300420016177, 0.017872257329750816, 0.017911137604062072, 0.022174425210843576, 0.005752533170007058, 0.010743187706319378, 0.014387012066209175, 0.015830606071395106, 0.016549891146153354, 0.010737726993635212, 0.01865423138612328, 0.01872587593653953, 0.010281648270253728, 0.013591713870887347, 0.016006441019825228, 0.012544786035079181, 0.015265531522837683, 0.02267047635107315, 0.024874638418909616, 0.01864462053179915, 0.018730681363701596, 0.013727794830976744, 0.020528129550821433, 0.010216338146551112, 0.005829420004600104, 0.012172583858526476, 0.01482692708004553, 0.01984139032366081, 0.011334910532775525, 0.01808719098099956, 0.015436997901120473, 0.014803118372742568, 0.01655600714435962, 0.015784080799326018, 0.023617363930507406, 0.018126289683818183, 0.020747650200724877, 0.011339934388444958, 0.020002153705082636, 0.011679809145907404, 0.024661452195719805, 0.014245907250450345, 0.00915761517134515, 0.017807384063062932, 0.017292329642692464, 0.018017075430134876, 0.011822879818232533, 0.012062277462306339, 0.018358697615656255, 0.018069498271902865, 0.011948913066983067],[0.010112201929359394, 0.021584764792967896, 0.018951763230362923, 0.043768255483302335, 0.01899457909395367, 0.018797208405693884, 0.03149507078019206, 0.007565876383291788, 0.0077656837467152745, 0.005986562780761545, 0.010531658153967933, 0.018525345076715237, 0.015331560130007063, 0.02175115489700348, 0.04025422180079345, 0.0407412087370817, 0.009859135808786442, 0.013382568095498173, 0.014689670272597813, 0.009749485426419895, 0.008571178936544454, 0.023088889561875364, 0.01438891493810671, 0.011233420601113838, 0.0033556497968683153, 0.003248784186117426, 0.03173804210365825, 0.010012994440551566, 0.019224322752245483, 0.007965143013686804, 0.009601892530790001, 0.005256604521007098, 0.019072552699192103, 0.0032184997947971414, 0.019577988747434095, 0.013067540806476822, 0.003133912356971519, 0.013352283704177889, 0.007258507216213498, 0.03514834304348386, 0.0047710099705266735, 0.01565981508420279, 0.020048615150480356, 0.00811865354899997, 0.03544039596667603, 0.024192703411031944, 0.008798485919672567, 0.044458182651081694, 0.021583720503612024, 0.012848936234647642, 0.015580449093156527, 0.004782497153441264, 0.00768144440534161, 0.005193250966750871, 0.009800307508405659, 0.005912070140042683, 0.01936251704367253, 0.01080212909713875, 0.021886912513266826, 0.007691539202448371, 0.007460055061896771, 0.011258135449202808, 0.01976596083149103, 0.015548772316028414],[0.008122032649379824, 0.01849437721074724, 0.022833751807773695, 0.052831132105941224, 0.016498379732359778, 0.015184700941298344, 0.04626943693157554, 0.009372073021497106, 0.009352694405202082, 0.00853352919292848, 0.010046018232646269, 0.016130425264930807, 0.021936354403790555, 0.018468778297863687, 0.041088169115509714, 0.04095586819191529, 0.00926226086249197, 0.018239584292794146, 0.017420419080520545, 0.006655478107546535, 0.002176386079454719, 0.019260669902018367, 0.017505828537524536, 0.010791736096739966, 0.000949791440632652, 0.003484562300457072, 0.04595124483685478, 0.008268448861386671, 0.01626129073546634, 0.0020878664741564618, 0.00895100679088918, 0.0011170217219934136, 0.016709630574193186, 0.0009617535494567408, 0.022394263929576674, 0.009731893254925697, 0.0034405417399844254, 0.01842762864350882, 0.01003262067076329, 0.039379262248900385, 0.0029589472387266096, 0.0166660884980735, 0.02013366460400037, 0.002139303542100044, 0.039154613845184, 0.019451345916674342, 0.00222495224128052, 0.05276892914005596, 0.016780924742784756, 0.009632846993862241, 0.016760589157783803, 0.0029565548169617917, 0.005288448311129666, 0.0011261129246997212, 0.00682175142020137, 0.00864788695328677, 0.015389731486543226, 0.010138365712768235, 0.01711036121980016, 0.0053429955273675105, 0.010015634476233085, 0.010926190199922725, 0.020466689713663, 0.02151815907930041]]
	T = [[0.98,0.01,0.01], [0.01,0.98,0.01],[0.01,0.01,0.98]]
	pi = [0.3333,0.3333,0.3333]
	m=HMMFromMatrices(sigma,DiscreteDistribution(sigma),T,E,pi)
	print m

	temp_seq = ""

	with open(args.pos, 'r') as fafh:
		input_str = fafh.readline()  #get rid of initial >
		while True:
			input_str = fafh.readline()
			if len(input_str) == 0: break
			input_str = input_str.strip().upper()

			if '>' in input_str:
				test_seq = EmissionSequence(sigma,list(temp_seq))
				v,log = m.viterbi(test_seq)
				print v
				temp_seq = ""
			else:
				temp_seq += input_str
	# print temp_seq