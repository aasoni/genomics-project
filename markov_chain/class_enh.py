#!/usr/bin/env python
import re
import sys
import string
import numpy
import math
import argparse
import itertools
from enh_prob_1 import enh_table_1
from null_prob_1 import null_table_1
from enh_prob_2 import enh_table_2
from null_prob_2 import null_table_2
from enh_prob_3 import enh_table_3
from null_prob_3 import null_table_3
from enh_prob_4 import enh_table_4
from null_prob_4 import null_table_4
from enh_prob_5 import enh_table_5
from null_prob_5 import null_table_5

def classify(seq, lrTab,ln):
	bits = 0
	bp = ['A','C','G','T']
	dna = ln*[bp]
	kmers = list(itertools.product(*dna))
	for i in xrange(len(kmers)):
		kmers[i] = ''.join(kmers[i])
	count = 0
	nucmap = {}
	for k in kmers:
		nucmap[k] = count
		count += 1
	for dinuc in [ seq[i:i+ln+1] for i in xrange(0, len(seq)-ln) ]:
		i, j = nucmap[dinuc[0:ln]], nucmap[dinuc[1:ln+1]]
		bits += lrTab[i, j]
	return bits

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description="Testing..")
	parser.add_argument("test", help="test data set")
	# parser.add_argument("neg", help="negative data set")
	args = parser.parse_args()
	
	#chain tables for first order
	# enh_table = [[0.31884652438020655, 0.18365369825159822, 0.2778363966570148, 0.21966338071118044],[0.33390246922430256, 0.2704970381038651, 0.06544845518706541, 0.3301520374847669],[0.2683126745414137, 0.2401333480201901, 0.2722748861228642, 0.219279091315532],[0.18253832795563465, 0.2210979174624848, 0.27612383065532065, 0.32023992392655987]]
	# null_table = [[0.2891999501664815, 0.19732196036869978, 0.2883415166114573, 0.22513657285336147],[0.3364314182576252, 0.2700707219864374, 0.04953165116950854, 0.3439662085864289],[0.2783322643757929, 0.21733289361073624, 0.2682382028564434, 0.2360966391570275],[0.19023390165336665, 0.23464840077254415, 0.28576326070649094, 0.28935443686759826]]
	# enh_table = enh_table_1  #load from file instead
	# null_table = null_table_1  #load from file instead

	#chain tables for second order
	# enh_table = [[0.3612618957639056, 0.16180815611364963, 0.24365272958394887, 0.2332772185384959, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.43106739098517105, 0.2220378799001615, 0.00016667156071061518, 0.28022316840405226, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.29819551854055126, 0.2486119373388856, 0.2650703946063851, 0.18812214951417808, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.20851561321466283, 0.18557349021974154, 0.26825313018554836, 0.33765776638004724],[0.24427181033382112, 0.22486520462380058, 0.314591292562438, 0.2162716924799403, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.3030900320756103, 0.30414289561959795, 0.00017132538380548958, 0.32144168849930216, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.2072470396910098, 0.26823194592671645, 0.2980129084718199, 0.22650810591045384, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.1495489903591058, 0.2534063491745673, 0.31883027821438226, 0.2782143822519447],[0.32481083719794973, 0.17010007322431048, 0.32302904564315355, 0.18206004393458627, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.31882361044149043, 0.2648942764653213, 0.00017499139059163855, 0.3412907225015497, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.2807583074692327, 0.23536531294563146, 0.3046771081738547, 0.17919927141128114, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.17286351848501297, 0.20933598697304143, 0.33484108316748085, 0.28295941137446473],[0.3502200637426013, 0.1762482926088936, 0.22672636211868266, 0.24680528152982242, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.29783812088569717, 0.2824281867145422, 0.000150319170157590264, 0.36941452224217036, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.23946352449127323, 0.230425078420333, 0.24852207833990186, 0.2815893187484919, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.1976312883858947, 0.22540714926506109, 0.2112173072941826, 0.36574425505486163]]
	# null_table = [[0.3382522580011781, 0.17497668368348715, 0.26900279795798154, 0.21776826035735322, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.40252667091367506, 0.23958510915110676, 0.000154669765188289025, 0.30321845474692916, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.30636269455612836, 0.21895118521990084, 0.26801879578698107, 0.2066673244369897, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.22599053136583863, 0.2034965974565889, 0.2903424673774729, 0.2801704038000996],[0.22188076983257707, 0.22753872633390707, 0.32172117039586917, 0.2288593334376467, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.32419811027537765, 0.2776698576490334, 0.000153272828992354075, 0.3448592030832349, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.22089463389744027, 0.23611701675312527, 0.28080619100263626, 0.2621821583467982, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.16201302081738395, 0.25446939862932316, 0.3160396136626714, 0.2674779668906215],[0.3056626014417192, 0.18754439255867375, 0.31090659050037023, 0.19588641549923683, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.32695969991343654, 0.27568529383476004, 0.00015197653169183418, 0.34537847455996923, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.29248912745366923, 0.2210790267601771, 0.2784155467617443, 0.20801629902440935, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.1854633480230898, 0.22218182785497043, 0.33348111760376675, 0.25887370651817304],[0.29383220415746225, 0.19682783225961495, 0.24197021933432541, 0.2673697442485974, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.30065089911063786, 0.2835235538491534, 0.00013971384435412511, 0.3761117026860837, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.2479890858134094, 0.2094622540758437, 0.25985394250297855, 0.2826947176077683, 0.0001, 0.0001, 0.0001, 0.0001],[0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.19441903019213175, 0.24794144556267156, 0.21889600487953645, 0.3387435193656603]]
	# enh_table = enh_table_2  #load from file
	# null_table = null_table_2  #load from file

	#chain tables for third order
	# enh_table = enh_table_3
	# null_table = null_table_3

	#chain tables for fourth order
	# enh_table = enh_table_4
	# null_table = null_table_4

	#chain tables for fifth order
	enh_table = enh_table_5
	null_table = null_table_5

	enh_table = numpy.log2(enh_table)
	null_table = numpy.log2(null_table)
	diff_table = enh_table - null_table

	# print enh_table[0][4]
	# print null_table[3][3]

	ln = 5
	temp_seq = ""
	test_seq_count = 1
	correct = 0
	incorrect = 0
	num_enh = 818  #number of enhancer test seq in test file
	with open(args.test, 'r') as fafh:
		input_str = fafh.readline()  #get rid of initial >
		while True:
			input_str = fafh.readline()
			if len(input_str) == 0: break
			input_str = input_str.strip().upper()

			if '>' in input_str:
				# enh_dist = classify(temp_seq,enh_table,2)
				# null_dist = classify(temp_seq,null_table,2)
				dist = classify(temp_seq,diff_table,ln)
				if dist > 0 and test_seq_count<=num_enh:
					# print enh_dist - null_dist
					correct += 1
				elif dist < 0 and test_seq_count>num_enh:
					correct += 1
				else:
					# print test_seq_count
					incorrect += 1
				temp_seq = ""
				test_seq_count += 1
			else:
				temp_seq += input_str
	# print correct
	# print incorrect
	print "percent accuracy: " + str(100*float(correct)/float(correct+incorrect)) + " %"